from qgis.core import (
    QgsPointXY,
    QgsGeometry,
    QgsProject,
    QgsVectorLayer,
    QgsFeature,
    QgsCoordinateReferenceSystem,
    QgsCoordinateTransform
)
from qgis.PyQt.QtCore import QVariant
from qgis.utils import iface

try:
    # Coordenadas fornecidas
    x = 507023
    y = 8646346
    zone = 24

    # Nome da camada de buffer e CRS dependendo da zona
    if zone == 24:
        buffer_layer_name = "FXD24"
        crs_utm = QgsCoordinateReferenceSystem("EPSG:31984")  # SIRGAS 2000 / UTM zone 24S
    elif zone == 23:
        buffer_layer_name = "FXD23"
        crs_utm = QgsCoordinateReferenceSystem("EPSG:31983")  # SIRGAS 2000 / UTM zone 23S
    else:
        raise ValueError("Zona inválida. Use 23 ou 24.")

    # Alterar o SRC do projeto de acordo com a zona
    QgsProject.instance().setCrs(crs_utm)

    # Obter a camada de buffer pelo nome
    buffer_layers = QgsProject.instance().mapLayersByName(buffer_layer_name)
    if not buffer_layers:
        print(f"Camada {buffer_layer_name} não encontrada")
    else:
        buffer_layer = buffer_layers[0]  # Pega a primeira camada encontrada com o nome

        # Definir CRS do projeto atual
        crs_project = QgsProject.instance().crs()

        # Criar um transformador de coordenadas
        transform = QgsCoordinateTransform(crs_utm, crs_project, QgsProject.instance())

        # Criar um ponto a partir das coordenadas fornecidas e transformá-lo
        point = QgsPointXY(x, y)
        point_geometry = QgsGeometry.fromPointXY(point)
        point_geometry.transform(transform)

        # Verificar se o ponto intersecta com algum polígono da camada de buffer
        is_within_buffer = False
        for feature in buffer_layer.getFeatures():
            if feature.geometry().intersects(point_geometry):
                is_within_buffer = True
                break

        # Criar uma nova camada de vetor de pontos (permanente)
        point_layer = QgsVectorLayer(
            f"Point?crs={crs_project.authid()}&field=id:integer&field=in_buffer:string(3)",
            "Marcação",
            "memory"
        )
        pr = point_layer.dataProvider()

        # Adicionar o ponto à camada com um atributo indicando se está no buffer
        feature = QgsFeature()
        feature.setGeometry(point_geometry)
        feature.setAttributes([1, "Sim" if is_within_buffer else "Não"])
        pr.addFeature(feature)
        point_layer.updateFields()
        QgsProject.instance().addMapLayer(point_layer)

        # Centralizar o mapa no ponto adicionado e garantir que o ponto seja visível
        iface.mapCanvas().setExtent(point_layer.extent())
        iface.mapCanvas().refresh()

        # Printar o resultado no console
        if is_within_buffer:
            print("Dentro da FXD")
        else:
            print("Fora da FXD")

except Exception as e:
    print(f"Ocorreu um erro: {e}")
